/*
poly3.sing
Fernando Araujo, Nathan Sartnurak, Kidus Yohannes

Run on Singular:
<"poly3.sing";
*/

// This is how you declare a ring
// This is r = Q[a, b, c] with LEX a>b>c
// Outputs e and d go before PIs: LEX e>d>a>b>c
ring r = 2, (z, y, x, d, c, b, a), lp;

// Uncomment this ring declaration for more experiments
// lp = LEX, dp = DEGREVLEX, Dp = deglex

// poly f = d + c + b + a;

poly g(1) = z + y*d + y + d;
poly g(2) = y + x*c + x + c;
poly g(3) = x + a*b + a + b;

printf("g1: %s", g(1));
printf("g2: %s", g(2));
printf("g3: %s", g(3));

printf("");

// This is ideal J = <f, g, h> generated by polynomials f, g, h
ideal J = g(1), g(2), g(3);

poly h(1) = 0;
poly h(2) = 0;
poly h(3) = 0;
poly h(4) = 0;
poly h(5) = 0;
poly h(6) = 0;
poly h(7) = 0;

poly st_num = 0;
poly func = z;

// 1-step reduction Algorithm
// /*
printf("Begin the optimized algorithm with a for loop");
 
for (int i = 1; i < 8; i++)
{
   for (int j = 1; j < 4; j++)
   {
      // This a 1-step reduction (1 step of division)
      if (lead(func)/lead(g(j)) != 0)
      {
	 printf("-------------------------------");
	 printf("i = %s",i);
         printf("j = %s",j);
         printf("u(%s) = %s", i, (lead(func)/lead(g(j))));
         printf("f = %s",func);
	 printf("");

	 printf("%s --g(%s)--> h(%s)", func, j, i);
         h(i) = func - (lead(func)/lead(g(j)))*g(j);

         func = h(i);
         printf("h(%s) = %s", i, h(i));

         printf("");

	 // This is how you print a value
	 printf("Leading Coefficient of h(%s):", i);
	 leadcoef(h(i));
	 printf("Leading Monomial of h(%s):", i);
	 leadmonom(h(i));

         printf("");
         //printf("");

	 break;
      }
   }
}

// */


// Compute a Grobner Basis
// two algorithms implemented in singular to compute GB
J = groebner(J);
J = slimgb(J);

// print the GB
printf("GB of Ideal J");
J;
printf("");

// Divide f by the groebner basis of ideal J
poly l = reduce(z, J);
// print poly l;
printf("Reduction of z, J");
l;

// l has to be 0 as f is already in J

// you can also access individual polynomials in the GB
//J[3];

//leadcoef(J[3]);

quit;
