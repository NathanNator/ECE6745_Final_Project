/*
demo.sing
Fernando Araujo, Nathan Sartnurak, Kiduce Yohannes

Run on Singular:
<"demo.sing";
*/

// This is how you declare a ring
// This is r = Q[a, b, c] with LEX a>b>c
// Outputs e and d go before PIs: LEX e>d>a>b>c
ring r = 0, (e, d, a, b, c), lp;

// Uncomment this ring declaration for more experiments
// lp = LEX, dp = DEGREVLEX, Dp = deglex

poly f = a * b * c;

poly f1 = e + d * c;
poly f2 = d + a * b;

//printf("");

printf("f1: %s", f1);
printf("f2: %s", f2);

printf("");

// This is ideal J = <f, g, h> generated by polynomials f, g, h
ideal J = f1, f2;

poly t1;
poly t2;

// This a 1-step reduction (1 step of division)

// e --f1--> +r [t1]
// /* 
printf("e --f1--> +r [t1]");
if (lead(e)/lead(f1) != 0)
{
t1 = e - lead(e)/lead(f1) * f1;
}

//print t1
printf("t1 = 1-step reduction of e by f1:");
t1; 

// This is how you print a value
printf("Leading Coefficient of t1:");
leadcoef(t1);
printf("Leading Monomial of t1:");
leadmonom(t1);

printf("");

printf("t1 --f2--> +r [t2]");
if (lead(t1)/lead(f2) != 0)
{
t2 = t1 - lead(t1)/lead(f2) * f2;
} 
//print t2
printf("t2 = 1-step reduction of t1 by f2:");
t2; 

// This is how you print a value
printf("Leading Coefficient of t2:");
leadcoef(t2);
printf("Leading Monomial of t2:");
leadmonom(t2);
// */


// e --f2--> +r [t1]
 /* 
printf("e --f2--> +r [t1]");
if (lead(e)/lead(f2) != 0)
{
t1 = e - lead(e)/lead(f2) * f2;
}

//print t1
printf("t1 = 1-step reduction of e by f2:");
t1; 

// This is how you print a value
printf("Leading Coefficient of t1:");
leadcoef(t1);
printf("Leading Monomial of t1:");
leadmonom(t1);

printf("");

printf("t1 --f1--> +r [t2]");
if (lead(t1)/lead(f1) != 0)
{
t2 = t1 - lead(t1)/lead(f1) * f1;
} 
//print t2
printf("t2 = 1-step reduction of t1 by f1:");
t2; 

// This is how you print a value
printf("Leading Coefficient of t2:");
leadcoef(t2);
printf("Leading Monomial of t2:");
leadmonom(t2);
// */


// Compute a Grobner Basis
// two algorithms implemented in singular to compute GB
J = groebner(J);
J = slimgb(J);

// print the GB
printf("");
printf("GB of Ideal J");
J;
printf("");

// Divide f by the groebner basis of ideal J
poly l = reduce(e, J);
// print poly l;
printf("Reduction of e, J");
l;

// l has to be 0 as f is already in J

// you can also access individual polynomials in the GB
//J[3];

//leadcoef(J[3]);

quit;
